import React, { useState } from 'react';
import {
  Box,
  Button,
  VStack,
  HStack,
  Text,
  Heading,
  Container,
  Card,
  CardBody,
  CardHeader,
  Input,
  FormControl,
  FormLabel,
  FormErrorMessage,
  Alert,
  AlertIcon,
  Divider,
  useColorModeValue,
  Badge,
  Spacer,
  Flex
} from '@chakra-ui/react';

const AuthInterface = ({ trialStatus }) => {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const cardBg = useColorModeValue('white', 'gray.800');
  const mainBg = useColorModeValue('gray.50', 'gray.900');

  const validateForm = () => {
    const newErrors = {};

    if (!email) {
      newErrors.email = 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุทููุจ';
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุบูุฑ ุตุญูุญ';
    }

    if (!password) {
      newErrors.password = 'ูููุฉ ุงููุฑูุฑ ูุทููุจุฉ';
    } else if (password.length < 6) {
      newErrors.password = 'ูููุฉ ุงููุฑูุฑ ูุฌุจ ุฃู ุชููู 6 ุฃุญุฑู ุนูู ุงูุฃูู';
    }

    if (!isLogin && password !== confirmPassword) {
      newErrors.confirmPassword = 'ูููุงุช ุงููุฑูุฑ ุบูุฑ ูุชุทุงุจูุฉ';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleLogin = async () => {
    if (!validateForm()) return;

    setIsLoading(true);
    try {
      // ูุญุงูุงุฉ ุทูุจ ุชุณุฌูู ุงูุฏุฎูู
      await new Promise(resolve => setTimeout(resolve, 2000));
      console.log('ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ! (ูุญุงูุงุฉ)');
      alert('ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ! (ูุญุงูุงุฉ)');
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู:', error);
      setErrors({ general: 'ุญุฏุซ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSignup = async () => {
    if (!validateForm()) return;

    setIsLoading(true);
    try {
      // ูุญุงูุงุฉ ุทูุจ ุฅูุดุงุก ุงูุญุณุงุจ
      await new Promise(resolve => setTimeout(resolve, 2000));
      console.log('ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ! (ูุญุงูุงุฉ)');
      alert('ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ! (ูุญุงูุงุฉ)');
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงูุญุณุงุจ:', error);
      setErrors({ general: 'ุญุฏุซ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุญุณุงุจ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubscribe = () => {
    console.log('ุงูุงุดุชุฑุงู ุงููุจุงุดุฑ...');
    alert('ููุฒุฉ ุงูุงุดุชุฑุงู ุงููุจุงุดุฑ ุณุชููู ูุชุงุญุฉ ูุฑูุจุงู!');
  };

  return (
    <Box bg={mainBg} minH="100vh" py={8}>
      <Container maxW="md">
        <VStack spacing={8}>
          {/* Header */}
          <Card w="full" bg={cardBg} shadow="lg">
            <CardBody textAlign="center">
              <Heading as="h1" size="xl" mb={4} color="blue.600">
                ๐ค ุชุทุจูู ุงูุชูุฎูุต ุงูุฐูู
              </Heading>

              <Alert status="warning" borderRadius="lg" mb={6}>
                <AlertIcon />
                <VStack align="start" spacing={1}>
                  <Text fontWeight="bold">ุงูุชูุช ูุชุฑุชู ุงูุชุฌุฑูุจูุฉ ุงููุฌุงููุฉ!</Text>
                  <Text fontSize="sm">
                    ููุฏ ุงุณุชูุชุนุช ุจู 7 ุฃูุงู ูู ุงูุงุณุชุฎุฏุงู ุงููุฌุงูู.
                  </Text>
                  <Text fontSize="sm" color="gray.600">
                    ูููุชุงุจุนุฉุ ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ุฃู ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ.
                  </Text>
                </VStack>
              </Alert>

              {/* Trial Statistics */}
              <Card bg="blue.50" border="1px solid" borderColor="blue.200" mb={6}>
                <CardHeader pb={2}>
                  <Text fontSize="md" fontWeight="semibold" color="blue.700">
                    ๐ ุฅุญุตุงุฆูุงุช ูุชุฑุชู ุงูุชุฌุฑูุจูุฉ
                  </Text>
                </CardHeader>
                <CardBody pt={0}>
                  <VStack spacing={2}>
                    <Flex w="full" justify="space-between">
                      <Text fontSize="sm">ูุฏุฉ ุงูุงุณุชุฎุฏุงู:</Text>
                      <Badge colorScheme="blue">7 ุฃูุงู ูุงููุฉ</Badge>
                    </Flex>
                    <Flex w="full" justify="space-between">
                      <Text fontSize="sm">ูุนุฑู ุงูุฌูุงุฒ:</Text>
                      <Text fontSize="xs" color="gray.600">
                        {trialStatus.deviceId?.substring(0, 15)}...
                      </Text>
                    </Flex>
                  </VStack>
                </CardBody>
              </Card>
            </CardBody>
          </Card>

          {/* Authentication Form */}
          <Card w="full" bg={cardBg} shadow="lg">
            <CardHeader>
              <HStack spacing={4} justify="center">
                <Button
                  variant={isLogin ? "solid" : "ghost"}
                  colorScheme="blue"
                  onClick={() => setIsLogin(true)}
                >
                  ุชุณุฌูู ุงูุฏุฎูู
                </Button>
                <Button
                  variant={!isLogin ? "solid" : "ghost"}
                  colorScheme="blue"
                  onClick={() => setIsLogin(false)}
                >
                  ุฅูุดุงุก ุญุณุงุจ
                </Button>
              </HStack>
            </CardHeader>

            <CardBody>
              <VStack spacing={4}>
                {errors.general && (
                  <Alert status="error" borderRadius="md">
                    <AlertIcon />
                    <Text>{errors.general}</Text>
                  </Alert>
                )}

                <FormControl isInvalid={errors.email}>
                  <FormLabel>ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</FormLabel>
                  <Input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="ุฃุฏุฎู ุจุฑูุฏู ุงูุฅููุชุฑููู"
                    dir="ltr"
                  />
                  <FormErrorMessage>{errors.email}</FormErrorMessage>
                </FormControl>

                <FormControl isInvalid={errors.password}>
                  <FormLabel>ูููุฉ ุงููุฑูุฑ</FormLabel>
                  <Input
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="ุฃุฏุฎู ูููุฉ ุงููุฑูุฑ"
                    dir="ltr"
                  />
                  <FormErrorMessage>{errors.password}</FormErrorMessage>
                </FormControl>

                {!isLogin && (
                  <FormControl isInvalid={errors.confirmPassword}>
                    <FormLabel>ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ</FormLabel>
                    <Input
                      type="password"
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      placeholder="ุฃุนุฏ ุฅุฏุฎุงู ูููุฉ ุงููุฑูุฑ"
                      dir="ltr"
                    />
                    <FormErrorMessage>{errors.confirmPassword}</FormErrorMessage>
                  </FormControl>
                )}

                <Button
                  colorScheme="blue"
                  size="lg"
                  w="full"
                  onClick={isLogin ? handleLogin : handleSignup}
                  isLoading={isLoading}
                  loadingText={isLogin ? "ุฌุงุฑู ุชุณุฌูู ุงูุฏุฎูู..." : "ุฌุงุฑู ุฅูุดุงุก ุงูุญุณุงุจ..."}
                >
                  {isLogin ? "ุชุณุฌูู ุงูุฏุฎูู" : "ุฅูุดุงุก ุญุณุงุจ"}
                </Button>

                <Divider />

                <Button
                  colorScheme="green"
                  variant="outline"
                  size="lg"
                  w="full"
                  onClick={handleSubscribe}
                  leftIcon={<Text>๐</Text>}
                >
                  ุงุดุชุฑู ุงูุขู ูุงูุญุตูู ุนูู ูุตูู ููุฑู
                </Button>

                <Text fontSize="sm" color="gray.600" textAlign="center">
                  ุจุงููุชุงุจุนุฉุ ุฃูุช ุชูุงูู ุนูู ุดุฑูุท ุงูุฎุฏูุฉ ูุณูุงุณุฉ ุงูุฎุตูุตูุฉ
                </Text>
              </VStack>
            </CardBody>
          </Card>

          {/* Features Preview */}
          <Card w="full" bg={cardBg} shadow="md">
            <CardHeader>
              <Text fontSize="lg" fontWeight="semibold" color="blue.600">
                โจ ูุง ุณุชุญุตู ุนููู ูุน ุงูุญุณุงุจ ุงููุฏููุน
              </Text>
            </CardHeader>
            <CardBody>
              <VStack spacing={3} align="start">
                <HStack>
                  <Text>๐ค</Text>
                  <Text fontSize="sm">ุชุณุฌูู ุตูุชู ุบูุฑ ูุญุฏูุฏ</Text>
                </HStack>
                <HStack>
                  <Text>๐ค</Text>
                  <Text fontSize="sm">ุชูุฎูุต ุฐูู ุจุงุณุชุฎุฏุงู AI ูุชูุฏู</Text>
                </HStack>
                <HStack>
                  <Text>๐พ</Text>
                  <Text fontSize="sm">ุญูุธ ููุดุงุฑูุฉ ุงูููุฎุตุงุช</Text>
                </HStack>
                <HStack>
                  <Text>๐ฑ</Text>
                  <Text fontSize="sm">ุงููุตูู ูู ุฌููุน ุงูุฃุฌูุฒุฉ</Text>
                </HStack>
                <HStack>
                  <Text>๐</Text>
                  <Text fontSize="sm">ุฎุตูุตูุฉ ูุฃูุงู ุนุงูู</Text>
                </HStack>
              </VStack>
            </CardBody>
          </Card>
        </VStack>
      </Container>
    </Box>
  );
};

export default AuthInterface;