import React, { useState, useEffect } from 'react';
import { useReactMediaRecorder } from 'react-media-recorder';

const SummaryInterface = () => {
  const [timer, setTimer] = useState(0);
  const [isActive, setIsActive] = useState(false);
  const [transcribedText, setTranscribedText] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [summary, setSummary] = useState('');
  const [isSummarizing, setIsSummarizing] = useState(false);

  const {
    status,
    startRecording,
    stopRecording,
    mediaBlobUrl,
  } = useReactMediaRecorder({ audio: true });

  // Timer functionality
  useEffect(() => {
    let interval = null;
    if (isActive && status === 'recording') {
      interval = setInterval(() => {
        setTimer(timer => timer + 1);
      }, 1000);
    } else if (!isActive) {
      clearInterval(interval);
    }
    return () => clearInterval(interval);
  }, [isActive, status, timer]);

  const handleStart = () => {
    setIsActive(true);
    setTimer(0);
    setTranscribedText(''); // ูุณุญ ุงููุต ุงูุณุงุจู
    setSummary(''); // ูุณุญ ุงูููุฎุต ุงูุณุงุจู
    startRecording();
  };

  const handleStop = async () => {
    setIsActive(false);
    stopRecording();
  };

  // ุฏุงูุฉ ูุฅุฑุณุงู ุงูุตูุช ุฅูู API
  const sendAudioToAPI = async () => {
    if (!mediaBlobUrl) return;
    
    setIsProcessing(true);
    try {
      // ุชุญููู mediaBlobUrl ุฅูู ูุงุฆู Blob
      const response = await fetch(mediaBlobUrl);
      const audioBlob = await response.blob();
      
      // ุฅูุดุงุก ูุงุฆู FormData ูุฅุถุงูุฉ ููู ุงูุตูุช ุฅููู
      const formData = new FormData();
      formData.append('audio_file', audioBlob, 'recording.wav');
      
      // ูุญุงูุงุฉ ุงุณุชุฌุงุจุฉ API (ุงุณุชุจุฏู ูุฐุง ุจู API ุญูููู)
      // const apiResponse = await fetch('https://api.example.com/speech-to-text', {
      //   method: 'POST',
      //   body: formData,
      // });
      
      // ูุญุงูุงุฉ ูุต ูุณุชุฎุฑุฌ ููุนุฑุถ (ูููู ุงุณุชุจุฏุงูู ุจู API ุญูููู)
      setTimeout(async () => {
        const simulatedText = 'ูุฐุง ูุต ุชุฌุฑูุจู ููุซู ุงููุต ุงููุณุชุฎุฑุฌ ูู ุงูุชุณุฌูู ุงูุตูุชู. ูุชุญุฏุซ ุนู ุฃูููุฉ ุงูุชูููููุฌูุง ูู ุญูุงุชูุง ุงูููููุฉ ูููู ูููู ููุฐูุงุก ุงูุงุตุทูุงุนู ุฃู ูุณุงุนุฏ ูู ุชุญุณูู ุงูุนุฏูุฏ ูู ุฌูุงูุจ ุงูุนูู ูุงูุชุนููู. ููุง ูุฐูุฑ ุงููุต ููุงุฆุฏ ุงุณุชุฎุฏุงู ุงูุชุทุจููุงุช ุงูุฐููุฉ ูู ุชุณููู ุงูููุงู ุงููุฎุชููุฉ.';
        setTranscribedText(simulatedText);
        setIsProcessing(false);
        console.log('ุงููุต ุงููุณุชุฎุฑุฌ:', simulatedText);
        
        // ุจุฏุก ุนูููุฉ ุงูุชูุฎูุต ุชููุงุฆูุงู
        await summarizeText(simulatedText);
      }, 2000);
      
      // ููุฏ API ุงูุญูููู (ูุนูู ููุขู):
      /*
      if (apiResponse.ok) {
        const result = await apiResponse.json();
        const extractedText = result.text || result.transcription || 'ูู ูุชู ุงูุนุซูุฑ ุนูู ูุต';
        setTranscribedText(extractedText);
        console.log('ุงููุต ุงููุณุชุฎุฑุฌ:', extractedText);
      } else {
        console.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุทูุจ:', apiResponse.status);
        setTranscribedText('ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุตูุช. ุญุงูู ูุฑุฉ ุฃุฎุฑู.');
      }
      */
      
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุตูุช ุฅูู API:', error);
      setTranscribedText('ุฎุทุฃ ูู ุงูุงุชุตุงู. ุชุฃูุฏ ูู ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช.');
      setIsProcessing(false);
    }
  };

  // ุฏุงูุฉ ูุชูุฎูุต ุงููุต ุจุงุณุชุฎุฏุงู AI
  const summarizeText = async (text) => {
    if (!text) return;
    
    setIsSummarizing(true);
    try {
      // ุชุญุถูุฑ ุงูุจูุงูุงุช ูู JSON ุจุฏูุงู ูู FormData
      const requestData = {
        text: text,
        max_length: 100,
        min_length: 30
      };
      
      // ุฅุฑุณุงู ุทูุจ POST ุฅูู API ุงูุชูุฎูุต
      // const apiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      //   method: 'POST',
      //   headers: {
      //     'Content-Type': 'application/json',
      //     'Authorization': 'Bearer YOUR_API_KEY'
      //   },
      //   body: JSON.stringify({
      //     model: "gpt-3.5-turbo",
      //     messages: [
      //       {
      //         role: "user",
      //         content: `ูุฎุต ุงููุต ุงูุชุงูู ูู ุฌููุชูู ุฃู ุซูุงุซ ุฌูู: ${text}`
      //       }
      //     ],
      //     max_tokens: 150
      //   })
      // });
      
      // ูุญุงูุงุฉ ุงุณุชุฌุงุจุฉ API ููุชูุฎูุต
      setTimeout(() => {
        const simulatedSummary = 'ููุฎุต: ุงููุต ูุชุญุฏุซ ุนู ุฃูููุฉ ุงูุชูููููุฌูุง ูุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุชุญุณูู ุญูุงุชูุง ุงูููููุฉุ ุฎุงุตุฉ ูู ูุฌุงูู ุงูุนูู ูุงูุชุนููู.';
        setSummary(simulatedSummary);
        setIsSummarizing(false);
        console.log('ุงูููุฎุต:', simulatedSummary);
      }, 3000);
      
      // ููุฏ API ุงูุญูููู ููุชูุฎูุต (ูุนูู ููุขู):
      /*
      if (apiResponse.ok) {
        const result = await apiResponse.json();
        const generatedSummary = result.choices[0].message.content || 'ูู ูุชู ุฅูุชุงุฌ ููุฎุต';
        setSummary(generatedSummary);
        console.log('ุงูููุฎุต:', generatedSummary);
      } else {
        console.error('ุฎุทุฃ ูู ุชูุฎูุต ุงููุต:', apiResponse.status);
        setSummary('ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุชูุฎูุต. ุญุงูู ูุฑุฉ ุฃุฎุฑู.');
      }
      */
      
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุชูุฎูุต ุงููุต:', error);
      setSummary('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุฎุฏูุฉ ุงูุชูุฎูุต.');
      setIsSummarizing(false);
    }
  };

  // ุงุณุชุฏุนุงุก sendAudioToAPI ุนูุฏูุง ูููู mediaBlobUrl ูุชุงุญุงู
  useEffect(() => {
    if (mediaBlobUrl && status === 'stopped') {
      sendAudioToAPI();
    }
  }, [mediaBlobUrl, status]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const getStatusText = () => {
    if (isProcessing) return 'ุฌุงุฑู ูุนุงูุฌุฉ ุงูุตูุช...';
    if (isSummarizing) return 'ุฌุงุฑู ุชูุฎูุต ุงููุต...';
    
    switch (status) {
      case 'recording':
        return 'ุงูุชุณุฌูู ุฌุงุฑู...';
      case 'stopped':
        return 'ูุชููู';
      case 'idle':
        return 'ุฌุงูุฒ ููุชุณุฌูู';
      default:
        return 'ุฌุงูุฒ ููุชุณุฌูู';
    }
  };

  return (
    <div style={{ textAlign: 'center', padding: '20px', maxWidth: '600px', margin: '0 auto' }}>
      <h1>ูุงุฌูุฉ ุงูุชูุฎูุต</h1>
      <p style={{ fontSize: '24px', margin: '20px 0' }}>{formatTime(timer)}</p>
      <p style={{ 
        fontSize: '16px', 
        margin: '10px 0', 
        color: status === 'recording' ? 'red' : isProcessing ? 'orange' : 'black' 
      }}>
        {getStatusText()}
      </p>
      
      <div style={{ margin: '20px 0' }}>
        <button 
          onClick={handleStart} 
          disabled={status === 'recording' || isProcessing || isSummarizing}
          style={{ 
            margin: '0 10px', 
            padding: '10px 20px',
            fontSize: '16px',
            backgroundColor: (status === 'recording' || isProcessing || isSummarizing) ? '#ccc' : '#4CAF50',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: (status === 'recording' || isProcessing || isSummarizing) ? 'not-allowed' : 'pointer'
          }}
        >
          ุงุจุฏุฃ
        </button>
        <button 
          onClick={handleStop} 
          disabled={status !== 'recording'}
          style={{ 
            margin: '0 10px', 
            padding: '10px 20px',
            fontSize: '16px',
            backgroundColor: status !== 'recording' ? '#ccc' : '#f44336',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: status !== 'recording' ? 'not-allowed' : 'pointer'
          }}
        >
          ุฅููุงู
        </button>
      </div>

      {mediaBlobUrl && (
        <div style={{ marginTop: '20px' }}>
          <p>ุงูุชุณุฌูู ุงูููุชูู:</p>
          <audio src={mediaBlobUrl} controls style={{ width: '100%', maxWidth: '400px' }} />
        </div>
      )}

      {transcribedText && (
        <div style={{ 
          marginTop: '30px', 
          padding: '20px', 
          backgroundColor: '#f0f0f0', 
          borderRadius: '8px',
          textAlign: 'right',
          direction: 'rtl'
        }}>
          <h3 style={{ color: '#333', marginBottom: '15px' }}>ุงููุต ุงููุณุชุฎุฑุฌ:</h3>
          <p style={{ 
            fontSize: '16px', 
            lineHeight: '1.6', 
            color: '#555',
            margin: '0'
          }}>
            {transcribedText}
          </p>
        </div>
      )}

      {isProcessing && (
        <div style={{ 
          marginTop: '20px',
          padding: '15px',
          backgroundColor: '#fff3cd',
          borderRadius: '5px',
          color: '#856404'
        }}>
          ๐ ุฌุงุฑู ุชุญููู ุงูุตูุช ุฅูู ูุต...
        </div>
      )}

      {isSummarizing && (
        <div style={{ 
          marginTop: '20px',
          padding: '15px',
          backgroundColor: '#d1ecf1',
          borderRadius: '5px',
          color: '#0c5460'
        }}>
          ๐ค ุฌุงุฑู ุชูุฎูุต ุงููุต ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู...
        </div>
      )}

      {summary && (
        <div style={{ 
          marginTop: '30px', 
          padding: '20px', 
          backgroundColor: '#e7f3ff', 
          borderRadius: '8px',
          textAlign: 'right',
          direction: 'rtl',
          border: '2px solid #007bff'
        }}>
          <h3 style={{ color: '#007bff', marginBottom: '15px' }}>๐ ุงูููุฎุต ุงูุฐูู:</h3>
          <p style={{ 
            fontSize: '16px', 
            lineHeight: '1.6', 
            color: '#333',
            margin: '0',
            fontWeight: 'bold'
          }}>
            {summary}
          </p>
        </div>
      )}
    </div>
  );
};

export default SummaryInterface;