🔧 التعديلات المطلوبة
1. في الـ Backend (server.js)

تأكد أن عندك مسار API للتفريغ يرجع JSON بدل ما يطبع في الكونسول:

import express from "express";
import multer from "multer";
import fetch from "node-fetch";

const app = express();
const upload = multer();

app.post("/api/transcribe", upload.single("audio"), async (req, res) => {
  try {
    const audioBuffer = req.file.buffer;

    // استدعاء واجهة OpenAI للتفريغ
    const response = await fetch("https://api.openai.com/v1/audio/transcriptions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: audioBuffer
    });

    if (!response.ok) {
      const error = await response.text();
      return res.status(500).json({ error });
    }

    const data = await response.json();

    // ✅ أرجع النص إلى الواجهة بدل console.log
    res.json({ transcription: data.text });

  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

export default app;

2. في الواجهة (React Component مثلاً: AudioRecorder.jsx)
import React, { useState } from "react";

export default function AudioRecorder() {
  const [transcript, setTranscript] = useState("");

  const handleUpload = async (audioBlob) => {
    const formData = new FormData();
    formData.append("audio", audioBlob, "recording.wav");

    const response = await fetch("/api/transcribe", {
      method: "POST",
      body: formData
    });

    const data = await response.json();

    if (data.transcription) {
      setTranscript(data.transcription); // ✅ خزنه في state
    } else {
      setTranscript("⚠️ خطأ في التفريغ");
    }
  };

  return (
    <div>
      <h3>النص المفرغ:</h3>
      <p>{transcript}</p>
    </div>
  );
}

3. عرض النص في واجهة المستخدم

سيظهر في واجهة التطبيق داخل <p>{transcript}</p> مباشرة بعد استقبال الرد.

📌 ملاحظات مهمة

لا تعتمد على console.log فقط → يجب أن ترجع البيانات بـ res.json.

في React لازم تخزنها بـ useState وتعرضها في JSX.

هذا نفس المسار اللي يربط Backend → Frontend بشكل صحيح.