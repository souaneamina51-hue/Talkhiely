
import React, { useState } from 'react';
import {
  Box,
  Button,
  VStack,
  HStack,
  Text,
  Heading,
  Container,
  Card,
  CardBody,
  Alert,
  AlertIcon,
  useColorModeValue,
  Divider,
  Input,
  FormControl,
  FormLabel,
  FormErrorMessage,
  InputGroup,
  InputRightElement,
  IconButton,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Link,
  Checkbox
} from '@chakra-ui/react';

const AuthInterface = ({ trialStatus }) => {
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [loginData, setLoginData] = useState({
    email: '',
    password: ''
  });
  const [registerData, setRegisterData] = useState({
    fullName: '',
    email: '',
    password: '',
    confirmPassword: '',
    acceptTerms: false
  });
  const [errors, setErrors] = useState({});

  const cardBg = useColorModeValue('white', 'gray.800');
  const mainBg = useColorModeValue('gray.50', 'gray.900');

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setErrors({});

    // ุงูุชุญูู ูู ุงูุจูุงูุงุช
    const newErrors = {};
    if (!loginData.email) newErrors.email = 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุทููุจ';
    if (!loginData.password) newErrors.password = 'ูููุฉ ุงููุฑูุฑ ูุทููุจุฉ';

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      setIsLoading(false);
      return;
    }

    try {
      // ููุง ูููู ุฅุถุงูุฉ ููุทู ุชุณุฌูู ุงูุฏุฎูู ุงููุนูู
      console.log('ุชุณุฌูู ุงูุฏุฎูู ุจุงูุจูุงูุงุช:', loginData);
      
      // ูุญุงูุงุฉ ุทูุจ API
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      alert('ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ! (ูุญุงูุงุฉ)');
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู:', error);
      setErrors({ general: 'ุญุฏุซ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setErrors({});

    // ุงูุชุญูู ูู ุงูุจูุงูุงุช
    const newErrors = {};
    if (!registerData.fullName) newErrors.fullName = 'ุงูุงุณู ุงููุงูู ูุทููุจ';
    if (!registerData.email) newErrors.email = 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุทููุจ';
    if (!registerData.password) newErrors.password = 'ูููุฉ ุงููุฑูุฑ ูุทููุจุฉ';
    if (registerData.password !== registerData.confirmPassword) {
      newErrors.confirmPassword = 'ูููุงุช ุงููุฑูุฑ ุบูุฑ ูุชุทุงุจูุฉ';
    }
    if (!registerData.acceptTerms) newErrors.acceptTerms = 'ูุฌุจ ุงูููุงููุฉ ุนูู ุงูุดุฑูุท ูุงูุฃุญูุงู';

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      setIsLoading(false);
      return;
    }

    try {
      // ููุง ูููู ุฅุถุงูุฉ ููุทู ุงูุชุณุฌูู ุงููุนูู
      console.log('ุฅูุดุงุก ุญุณุงุจ ุจุงูุจูุงูุงุช:', registerData);
      
      // ูุญุงูุงุฉ ุทูุจ API
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      alert('ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ! (ูุญุงูุงุฉ)');
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงูุญุณุงุจ:', error);
      setErrors({ general: 'ุญุฏุซ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุญุณุงุจ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubscribe = () => {
    console.log('ุงูุงุดุชุฑุงู ุงููุจุงุดุฑ...');
    alert('ููุฒุฉ ุงูุงุดุชุฑุงู ุงููุจุงุดุฑ ุณุชููู ูุชุงุญุฉ ูุฑูุจุงู!');
  };

  return (
    <Box bg={mainBg} minH="100vh" py={8}>
      <Container maxW="md">
        <VStack spacing={8}>
          {/* Header */}
          <Card w="full" bg={cardBg} shadow="lg">
            <CardBody textAlign="center">
              <Heading as="h1" size="xl" mb={4} color="blue.600">
                ๐ค ุชุทุจูู ุงูุชูุฎูุต ุงูุฐูู
              </Heading>
              
              <Alert status="warning" borderRadius="lg" mb={6}>
                <AlertIcon />
                <VStack align="start" spacing={1} w="full">
                  <Text fontWeight="bold">ุงูุชูุช ูุชุฑุชู ุงูุชุฌุฑูุจูุฉ ุงููุฌุงููุฉ!</Text>
                  <Text fontSize="sm">
                    ููุฏ ุงุณุชูุชุนุช ุจู {7 - (trialStatus?.remainingDays || 0)} ุฃูุงู ูู ุงูุงุณุชุฎุฏุงู ุงููุฌุงูู.
                  </Text>
                </VStack>
              </Alert>

              <Text fontSize="lg" color="gray.600" mb={6}>
                ูููุชุงุจุนุฉ ูู ุงุณุชุฎุฏุงู ุงูุชุทุจููุ ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ุฃู ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ
              </Text>
            </CardBody>
          </Card>

          {/* Auth Tabs */}
          <Card w="full" bg={cardBg} shadow="lg">
            <CardBody>
              <Tabs isFitted variant="enclosed">
                <TabList mb="1em">
                  <Tab>ุชุณุฌูู ุงูุฏุฎูู</Tab>
                  <Tab>ุฅูุดุงุก ุญุณุงุจ</Tab>
                </TabList>
                
                <TabPanels>
                  {/* Login Tab */}
                  <TabPanel>
                    <form onSubmit={handleLogin}>
                      <VStack spacing={4}>
                        {errors.general && (
                          <Alert status="error" borderRadius="md">
                            <AlertIcon />
                            {errors.general}
                          </Alert>
                        )}

                        <FormControl isInvalid={errors.email} isRequired>
                          <FormLabel>ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</FormLabel>
                          <Input
                            type="email"
                            value={loginData.email}
                            onChange={(e) => setLoginData({...loginData, email: e.target.value})}
                            placeholder="ุฃุฏุฎู ุจุฑูุฏู ุงูุฅููุชุฑููู"
                          />
                          <FormErrorMessage>{errors.email}</FormErrorMessage>
                        </FormControl>

                        <FormControl isInvalid={errors.password} isRequired>
                          <FormLabel>ูููุฉ ุงููุฑูุฑ</FormLabel>
                          <InputGroup>
                            <Input
                              type={showPassword ? 'text' : 'password'}
                              value={loginData.password}
                              onChange={(e) => setLoginData({...loginData, password: e.target.value})}
                              placeholder="ุฃุฏุฎู ูููุฉ ุงููุฑูุฑ"
                            />
                            <InputRightElement>
                              <IconButton
                                h="1.75rem"
                                size="sm"
                                onClick={() => setShowPassword(!showPassword)}
                                icon={<Text>{showPassword ? '๐' : '๐๏ธ'}</Text>}
                                variant="ghost"
                              />
                            </InputRightElement>
                          </InputGroup>
                          <FormErrorMessage>{errors.password}</FormErrorMessage>
                        </FormControl>

                        <HStack w="full" justify="space-between">
                          <Checkbox size="sm">ุชุฐูุฑูู</Checkbox>
                          <Link color="blue.500" fontSize="sm">
                            ูุณูุช ูููุฉ ุงููุฑูุฑุ
                          </Link>
                        </HStack>

                        <Button
                          type="submit"
                          colorScheme="blue"
                          size="lg"
                          w="full"
                          isLoading={isLoading}
                          loadingText="ุฌุงุฑู ุชุณุฌูู ุงูุฏุฎูู..."
                        >
                          ุชุณุฌูู ุงูุฏุฎูู
                        </Button>
                      </VStack>
                    </form>
                  </TabPanel>

                  {/* Register Tab */}
                  <TabPanel>
                    <form onSubmit={handleRegister}>
                      <VStack spacing={4}>
                        {errors.general && (
                          <Alert status="error" borderRadius="md">
                            <AlertIcon />
                            {errors.general}
                          </Alert>
                        )}

                        <FormControl isInvalid={errors.fullName} isRequired>
                          <FormLabel>ุงูุงุณู ุงููุงูู</FormLabel>
                          <Input
                            value={registerData.fullName}
                            onChange={(e) => setRegisterData({...registerData, fullName: e.target.value})}
                            placeholder="ุฃุฏุฎู ุงุณูู ุงููุงูู"
                          />
                          <FormErrorMessage>{errors.fullName}</FormErrorMessage>
                        </FormControl>

                        <FormControl isInvalid={errors.email} isRequired>
                          <FormLabel>ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</FormLabel>
                          <Input
                            type="email"
                            value={registerData.email}
                            onChange={(e) => setRegisterData({...registerData, email: e.target.value})}
                            placeholder="ุฃุฏุฎู ุจุฑูุฏู ุงูุฅููุชุฑููู"
                          />
                          <FormErrorMessage>{errors.email}</FormErrorMessage>
                        </FormControl>

                        <FormControl isInvalid={errors.password} isRequired>
                          <FormLabel>ูููุฉ ุงููุฑูุฑ</FormLabel>
                          <InputGroup>
                            <Input
                              type={showPassword ? 'text' : 'password'}
                              value={registerData.password}
                              onChange={(e) => setRegisterData({...registerData, password: e.target.value})}
                              placeholder="ุฃุฏุฎู ูููุฉ ูุฑูุฑ ูููุฉ"
                            />
                            <InputRightElement>
                              <IconButton
                                h="1.75rem"
                                size="sm"
                                onClick={() => setShowPassword(!showPassword)}
                                icon={<Text>{showPassword ? '๐' : '๐๏ธ'}</Text>}
                                variant="ghost"
                              />
                            </InputRightElement>
                          </InputGroup>
                          <FormErrorMessage>{errors.password}</FormErrorMessage>
                        </FormControl>

                        <FormControl isInvalid={errors.confirmPassword} isRequired>
                          <FormLabel>ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ</FormLabel>
                          <Input
                            type={showPassword ? 'text' : 'password'}
                            value={registerData.confirmPassword}
                            onChange={(e) => setRegisterData({...registerData, confirmPassword: e.target.value})}
                            placeholder="ุฃุนุฏ ุฅุฏุฎุงู ูููุฉ ุงููุฑูุฑ"
                          />
                          <FormErrorMessage>{errors.confirmPassword}</FormErrorMessage>
                        </FormControl>

                        <FormControl isInvalid={errors.acceptTerms}>
                          <Checkbox
                            isChecked={registerData.acceptTerms}
                            onChange={(e) => setRegisterData({...registerData, acceptTerms: e.target.checked})}
                          >
                            <Text fontSize="sm">
                              ุฃูุงูู ุนูู <Link color="blue.500">ุงูุดุฑูุท ูุงูุฃุญูุงู</Link> ู
                              <Link color="blue.500"> ุณูุงุณุฉ ุงูุฎุตูุตูุฉ</Link>
                            </Text>
                          </Checkbox>
                          <FormErrorMessage>{errors.acceptTerms}</FormErrorMessage>
                        </FormControl>

                        <Button
                          type="submit"
                          colorScheme="green"
                          size="lg"
                          w="full"
                          isLoading={isLoading}
                          loadingText="ุฌุงุฑู ุฅูุดุงุก ุงูุญุณุงุจ..."
                        >
                          ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ
                        </Button>
                      </VStack>
                    </form>
                  </TabPanel>
                </TabPanels>
              </Tabs>

              <Divider my={6} />

              {/* Direct Subscription Option */}
              <VStack spacing={4}>
                <Text fontSize="sm" color="gray.500">ุฃู</Text>
                <Button
                  onClick={handleSubscribe}
                  colorScheme="purple"
                  size="lg"
                  w="full"
                  leftIcon={<Text>โญ</Text>}
                >
                  ุงุดุชุฑู ูุจุงุดุฑุฉ ุจุฏูู ุญุณุงุจ
                </Button>
              </VStack>

              {/* Features List */}
              <Box mt={8} textAlign="right">
                <Text fontSize="md" fontWeight="bold" mb={3} color="gray.700">
                  ูููุฒุงุช ุงูุงุดุชุฑุงู:
                </Text>
                <VStack align="start" spacing={2} fontSize="sm" color="gray.600">
                  <HStack>
                    <Text>โ</Text>
                    <Text>ุชูุฎูุต ุบูุฑ ูุญุฏูุฏ ููุชุณุฌููุงุช</Text>
                  </HStack>
                  <HStack>
                    <Text>โ</Text>
                    <Text>ุญูุธ ุงูููุฎุตุงุช ูู ุงูุณุญุงุจุฉ</Text>
                  </HStack>
                  <HStack>
                    <Text>โ</Text>
                    <Text>ูุดุงุฑูุฉ ูุชูุฏูุฉ ููููุฎุตุงุช</Text>
                  </HStack>
                  <HStack>
                    <Text>โ</Text>
                    <Text>ุฏุนู ููู ุนูู ูุฏุงุฑ ุงูุณุงุนุฉ</Text>
                  </HStack>
                  <HStack>
                    <Text>โ</Text>
                    <Text>ุชุญูููุงุช ูุฅุญุตุงุฆูุงุช ูุชูุฏูุฉ</Text>
                  </HStack>
                  <HStack>
                    <Text>โ</Text>
                    <Text>ุฃููููุฉ ูู ุงููุนุงูุฌุฉ</Text>
                  </HStack>
                </VStack>
              </Box>
            </CardBody>
          </Card>
        </VStack>
      </Container>
    </Box>
  );
};

export default AuthInterface;
